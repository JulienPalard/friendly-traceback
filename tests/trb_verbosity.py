"""Creates a version of verbosity.rst to insert in the documentation.
"""

import os
import sys
import platform
from contextlib import redirect_stderr

import friendly_traceback

# Make it possible to find docs and tests source
this_dir = os.path.dirname(__file__)
docs_root_dir = os.path.abspath(
    os.path.join(this_dir, "..", "..", "friendly-traceback-docs")
)
assert os.path.isdir(docs_root_dir), "Separate docs repo need to exist"

sys.path.insert(0, this_dir)
py_version = f"{sys.version_info.major}.{sys.version_info.minor}"


def write(text):
    sys.stderr.write(text + "\n")


def write_section(text):
    write("\n" + text)
    write(".. code-block:: none\n")


target = os.path.normpath(
    os.path.join(docs_root_dir, f"docs/source/verbosity.rst")
)


levels = {
    1: """
Verbosity level 1: the current default
---------------------------------------

This includes all the custom information provided by Friendly-traceback.
It does not include a standard Python traceback.

We are hoping to get feedback from a variety of users to determine
which verbosity level should ideally used as the default.
""",
    2: """
Verbosity level 2
------------------------------
This is the same as level 1 with the addition of a Python traceback
preceding the information given in level 1.
""",
    3: """
Verbosity level 3
------------------------------
This is the same as level 1 with the addition of a Python traceback
after the information given in level 1.
""",
    4: """
Verbosity level 4
------------------------------
This is similar to level 1 except that the generic meaning of
a given exception ("what do we mean by UnboundLocalError...")
is **not** included.
""",
    5: """
Verbosity level 5
------------------------------
Same as level 4, with the addition of a Python traceback before
the rest of the information.
""",
    6: """
Verbosity level 6
------------------------------
Same as level 4, with the addition of a Python traceback after
the rest of the information.
""",
    7: """
Verbosity level 7
------------------------------
Same as level 4, except that some headers are not included.
""",
    8: """
Verbosity level 8
------------------------------
Python traceback followed by a brief guess as to the likely cause.
""",
    9: """
Verbosity level 9
------------------------------
Only the Python traceback.
""",
    0: """
Verbosity level 0
------------------------------
For all other levels that include a Python traceback, any calls
to Friendly-traceback itself are removed.  This shows the
true Python traceback, including the calls to our own code.
This is available for debugging purpose.
""",
}

script_name = "unbound_local_error.py"
with open(script_name, "r") as script:
    lines = script.readlines()

script_content = ["    " + line for line in lines]
script_content = "".join(script_content)

friendly_traceback.exclude_file_from_traceback(__file__)
friendly_traceback.set_stream("capture")
friendly_traceback.run(script_name, console=False)
result = friendly_traceback.get_output()
friendly_traceback.set_stream()

intro_text = """
..   The content of this page is generated by running
     {name} located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: {friendly}
Python version: {python}

Verbosity: how much information do we want?
=============================================

Suppose we try to run following program

.. code-block:: python
   :linenos:

{script_content}

It would generate the following traceback:

.. code-block:: none
""".format(
    friendly=friendly_traceback.__version__,
    python=platform.python_version(),
    name=__file__,
    script_content=script_content
)

after_tb = """
Confronted with such a terse output, a beginner might be confused
as to what it means.

* What does "most recent call last" mean?
* What is an UnboundLocalError?
* What does it mean to be referenced before assignment?
* What do I need to do to fix this error?
* etc.

This might be even more acute if this beginner does not understand
English.

Friendly-traceback attempts to provide all the information to
understand what might have gone wrong and, hopefully, how to fix it.
Other than the name of the exception (``UnboundLocalError``) and
the message generated by Python
(``local variable 'a_1' referenced before assignment``),
all the text provided by Friendly-traceback is translatable;
currently, only the original English version and a French translation
are available.

Instead of showing all the different calls,
Friendly-traceback only shows two locations:
where the program stopped, and where the exception
was actually raised.

In some cases, the amount of information given by default by Friendly-traceback
using the default values might not be appropriate. This can
be adjusted by selecting a different "verbosity" level, as elsewhere.

The useful amount of information to be provided by default by Friendly-traceback
will likely change **based on the feedback from actual users.**

Below, we show what content is included for each level.
"""


with open(target, "w", encoding="utf8") as out:
    with redirect_stderr(out):
        write(intro_text)
        friendly_traceback.set_verbosity(9)
        friendly_traceback.show_again()
        write(after_tb)
        for level in levels:
            write_section(levels[level])
            friendly_traceback.set_verbosity(level)
            friendly_traceback.show_again()
