
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples. SyntaxError cases are
shown in a separate page.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     trb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_trb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.0.4
Python version: 3.7.0



IndentationError - 1: expected an indented block
------------------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: expected an indented block (raise_indentation_error1.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    Python could not parse the file 'raise_indentation_error1.py'
    beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: 
       3: if True:
    -->4: pass
             ^

    Likely cause:
        In this case, the line identified above
        was expected to begin a new indented block.

IndentationError - 2: unexpected indent
---------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unexpected indent (raise_indentation_error2.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    Python could not parse the file 'raise_indentation_error2.py'
    beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: if True:
       3:     pass
    -->4:       pass
               ^

    Likely cause:
        In this case, the line identified above
        is more indented than expected and 
        does not match the indentation of the previous line.

IndentationError - 3: unindent does not match ...
-------------------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unindent does not match any outer indentation level (raise_indentation_error3.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.
    Python could not parse the file 'raise_indentation_error3.py'
    beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: if True:
       3:       pass
    -->4:     pass
                  ^

    Likely cause:
        In this case, the line identified above is
        less indented than the preceding one,
        and is not aligned vertically with another block of code.

NameError
---------

.. code-block:: none


    Python exception: 
        NameError: name 'c' is not defined

    A NameError exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.

    Likely cause:
        In your program, the unknown name is 'c'.


    Execution stopped on line 7 of file 'test_name_error.py'.

       5: def test_name_error():
       6:     try:
    -->7:         b = c
       8:     except Exception:


SyntaxError
-----------

.. code-block:: none


    Python exception: 
        SyntaxError: invalid syntax (raise_syntax_error1.py, line 3)

    A SyntaxError occurs when Python cannot understand your code.

    Python could not parse the file 'raise_syntax_error1.py'
    beyond the location indicated below by --> and ^.

       1: """ Should raise SyntaxError"""
       2: 
    -->3: pass = 2
               ^
    My best guess: you were trying to assign a value
    to a Python keyword. This is not allowed.


TabError
--------

.. code-block:: none


    Python exception: 
        TabError: inconsistent use of tabs and spaces in indentation (raise_tab_error.py, line 7)

    A TabError indicates that you have used both spaces
    and tab characters to indent your code.
    This is not allowed in Python.
    Indenting your code means to have block of codes aligned vertically
    by inserting either spaces or tab characters at the beginning of lines.
    Python's recommendation is to always use spaces to indent your code.

    Python could not parse the file 'raise_tab_error.py'
    beyond the location indicated below by --> and ^.

        4: 
        5: def test_tab_error():
        6:     if True:
    --> 7: 	pass
                ^

UnboundLocalError
-----------------

.. code-block:: none


    Python exception: 
        UnboundLocalError: local variable 'a' referenced before assignment

    In Python, variables that are used inside a function are known as 
    local variables. Before they are used, they must be assigned a value.
    A variable that is used before it is assigned a value is assumed to
    be defined outside that function; it is known as a 'global'
    (or sometimes 'nonlocal') variable. You cannot assign a value to such
    a global variable inside a function without first indicating to
    Python that this is a global variable, otherwise you will see
    an UnboundLocalError.

    Likely cause:
        The variable that appears to cause the problem is 'a'.
        Try inserting the statement
            global a
        as the first line inside your function.

    Execution stopped on line 13 of file 'test_unbound_local_error.py'.

       11: 
       12:     try:
    -->13:         inner()
       14:     except Exception:


    Exception raised on line 10 of file 'test_unbound_local_error.py'.

        8: 
        9:     def inner():
    -->10:         a += 1
       11: 


Unknown exception
-----------------

.. code-block:: none


    Python exception: 
        MyException: Some informative message

    No information is known about this exception.


    Execution stopped on line 11 of file 'test_unknown_error.py'.

        9: def test_unknown_error():
       10:     try:
    -->11:         raise MyException("Some informative message")
       12:     except Exception:


ZeroDivisionError - 1
---------------------

.. code-block:: none


    Python exception: 
        ZeroDivisionError: division by zero

    A ZeroDivisionError occurs when you are attempting to divide
    a value by zero:
        result = my_variable / 0
    It can also happen if you calculate the remainder of a division
    using the modulo operator '%'
        result = my_variable % 0

    Execution stopped on line 7 of file 'test_zero_division_error.py'.

       5: def test_zero_division_error():
       6:     try:
    -->7:         1 / 0
       8:     except Exception:


ZeroDivisionError - 2
---------------------

.. code-block:: none


    Python exception: 
        ZeroDivisionError: integer division or modulo by zero

    A ZeroDivisionError occurs when you are attempting to divide
    a value by zero:
        result = my_variable / 0
    It can also happen if you calculate the remainder of a division
    using the modulo operator '%'
        result = my_variable % 0

    Execution stopped on line 17 of file 'test_zero_division_error.py'.

       15: def test_zero_division_error2():
       16:     try:
    -->17:         1 % 0
       18:     except Exception:

