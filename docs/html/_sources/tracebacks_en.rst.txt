
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     tb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.
     On Windows, if Sphinx is installed on your computer, it is suggested
     instead to run make_tb.bat in the root directory as it will create
     similar files for all languages *and* update the documentation.

Friendly-traceback version: 0.0.4
Python version: 3.7.0



IndentationError - 1: expected an indented block
------------------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: expected an indented block (raise_indentation_error1.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.

    Likely cause:
        Python could not parse the file 'raise_indentation_error1.py'
        beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: 
       3: if True:
    -->4: pass
             ^
        In this case, the line identified above
        was expected to begin a new indented block.

IndentationError - 2: unexpected indent
---------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unexpected indent (raise_indentation_error2.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.

    Likely cause:
        Python could not parse the file 'raise_indentation_error2.py'
        beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: if True:
       3:     pass
    -->4:       pass
               ^
        In this case, the line identified above
        is more indented than expected and 
        does not match the indentation of the previous line.

IndentationError - 3: unindent does not match ...
-------------------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unindent does not match any outer indentation level (raise_indentation_error3.py, line 4)

    An IndentationError occurs when a given line of code is
    not indented (aligned vertically with other lines) as expected.

    Likely cause:
        Python could not parse the file 'raise_indentation_error3.py'
        beyond the location indicated below by --> and ^.

       1: '''Should raise IndentationError'''
       2: if True:
       3:       pass
    -->4:     pass
                  ^
        In this case, the line identified above is
        less indented than the preceding one,
        and is not aligned vertically with another block of code.

NameError
---------

.. code-block:: none


    Python exception: 
        NameError: name 'c' is not defined

    A NameError exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.

    Likely cause:
        In your program, the unknown name is 'c'.


    Execution stopped on line 52 of file 'tb_common.py'.

       50:                     mod = __import__(name)
       51:                     if function is not None:
    -->52:                         getattr(mod, function)()
       53:                 except Exception:


    Exception raised on line 6 of file 'raise_name_error.py'.

       4: def test():
       5:     """Should raise NameError"""
    -->6:     b = c
       7:     d = 3

SyntaxError
-----------

.. code-block:: none


    Python exception: 
        SyntaxError: invalid syntax (raise_syntax_error1.py, line 3)

    A SyntaxError occurs when Python cannot understand your code.
    There could be many possible reasons:
    - a keyword might be misspelled;
    - a colon, :, or some other symbol like (, ], etc., might be missing;
    - etc.

    Likely cause:
        Python could not parse the file 'raise_syntax_error1.py'
        beyond the location indicated below by --> and ^.

       1: """ Should raise SyntaxError"""
       2: 
    -->3: pass = 2
               ^
        Currently, we cannot give you more information
        about the likely cause of this error.

TabError - 1
------------

.. code-block:: none


    Python exception: 
        TabError: inconsistent use of tabs and spaces in indentation (<string>, line 3)

    A TabError indicates that you have used both spaces
    and tab characters to indent your code.
    This is not allowed in Python.
    Indenting your code means to have block of codes aligned vertically
    by inserting either spaces or tab characters at the beginning of lines.
    Python's recommendation is to always use spaces to indent your code.

    Likely cause:
        Unfortunately, no additional information is available:
        the content of file '<string>' is not accessible.

TabError - 2
------------

.. code-block:: none


    Python exception: 
        TabError: inconsistent use of tabs and spaces in indentation (raise_tab_error2.py, line 7)

    A TabError indicates that you have used both spaces
    and tab characters to indent your code.
    This is not allowed in Python.
    Indenting your code means to have block of codes aligned vertically
    by inserting either spaces or tab characters at the beginning of lines.
    Python's recommendation is to always use spaces to indent your code.

    Likely cause:
        Python could not parse the file 'raise_tab_error2.py'
        beyond the location indicated below by --> and ^.

        4: 
        5: def test_tab_error2():
        6:     if True:
    --> 7: 	pass
        8: 
                ^

Unknown exception
-----------------

.. code-block:: none


    Python exception: 
        MyException: Some informative message

    No information is known about this exception.


    Execution stopped on line 52 of file 'tb_common.py'.

       50:                     mod = __import__(name)
       51:                     if function is not None:
    -->52:                         getattr(mod, function)()
       53:                 except Exception:


    Exception raised on line 8 of file 'raise_unknown_error.py'.

        6: 
        7: def test():
    --> 8:     raise MyException("Some informative message")
        9: 
