
Friendly tracebacks - in English
======================================

Friendly-traceback aims to provide friendlier feedback when an exception
is raised than what is done by Python.
Below, we can find some examples.
Ideally, an example of each case handled by friendly-traceback
should be included here.

.. note::

     The content of this page is generated by running
     tb_english.py located in the ``tests/`` directory.
     This needs to be done explicitly, independently of updating the
     documentation using Sphinx.

Friendly-traceback version: 0.0.3
Python version: 3.7.0



IndentationError - 1: expected an indented block
------------------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: expected an indented block (raise_indentation_error1.py, line 4)

    An indentation error occurs when a given line is
    not indented (aligned vertically) as expected.


        Line 4: pass

        File: raise_indentation_error1.py

        In this case, the line identified in the file above
        was expected to begin a new indented block.


    Execution stopped on line 46 of file 'tb_common.py'.

       44:                 make_title(title)
       45:                 try:
    -->46:                     mod = __import__(name)
       47:                     if function is not None:

IndentationError - 2: unexpected indent
---------------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unexpected indent (raise_indentation_error2.py, line 4)

    An indentation error occurs when a given line is
    not indented (aligned vertically) as expected.


        Line 4:       pass

        File: raise_indentation_error2.py

        In this case, the line identified in the file above
        is more indented than expected and does not match
        the indentation of the previous line.


    Execution stopped on line 46 of file 'tb_common.py'.

       44:                 make_title(title)
       45:                 try:
    -->46:                     mod = __import__(name)
       47:                     if function is not None:

IndentationError - 3: no match ...
----------------------------------

.. code-block:: none


    Python exception: 
        IndentationError: unindent does not match any outer indentation level (raise_indentation_error3.py, line 4)

    An indentation error occurs when a given line is
    not indented (aligned vertically) as expected.


        Line 4:     pass

        File: raise_indentation_error3.py

        In this case, the line identified in the file above
        is less indented the preceding one, and is not aligned
        vertically with another block of code.


    Execution stopped on line 46 of file 'tb_common.py'.

       44:                 make_title(title)
       45:                 try:
    -->46:                     mod = __import__(name)
       47:                     if function is not None:

NameError
---------

.. code-block:: none


    Python exception: 
        NameError: name 'c' is not defined

    A NameError exception indicates that a variable or
    function name is not known to Python.
    Most often, this is because there is a spelling mistake.
    However, sometimes it is because the name is used
    before being defined or given a value.

        In your program, the unknown name is 'c'.


    Execution stopped on line 48 of file 'tb_common.py'.

       46:                     mod = __import__(name)
       47:                     if function is not None:
    -->48:                         getattr(mod, function)()
       49:                 except Exception:


    Exception raised  on line 8 of file 'raise_name_error.py'.

        6:     """Should raise NameError"""
        7:     a = 1
    --> 8:     b = c
        9:     d = 3
